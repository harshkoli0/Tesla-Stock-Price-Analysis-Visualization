import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

# What is the range of Tesla’s daily high and low prices?

range=df1["High"]-df1["Low"]

# What is the skewness and kurtosis of Tesla’s clsoing prices?
closing_price_skewness=stats.skew(df1["Close"])
closing_price_kurtosis=stats.kurtosis(df1["Close"])
print("skewnwss:" ,closing_price_skewness)
print("kurtosis",closing_price_kurtosis)

#What is the probability that Tesla’s closing price will be above a certain threshold (e.g., $250) based on historical data?
threshold = 250
close_mean=df1["Close"].mean()
close_std=df1["Close"].std()
proba=1-stats.norm.cdf(threshold,loc=close_mean,scale=close_std)
proba

# What is the probability that Tesla’s stock price will fall below $200 on any given day based on past trends?
threshold=200
close_mean=df1["Close"].mean()
close_std=df1["Close"].std()
probabtiltiy_fall=stats.norm.cdf(threshold,loc=close_mean,scale=close_std)*100
print(f"probabtiltiy_fall {probabtiltiy_fall :.2f}%")

# What is the probability that Tesla’s stock price will remain between $220 and $280 on any given day?
threshold1=220
threshold2=280
close_mean=df1["Close"].mean()
close_std=df1["Close"].std()
prob1=stats.norm.cdf(threshold1,loc=close_mean,scale=close_std)
prob2=stats.norm.cdf(threshold2,loc=close_mean,scale=close_std)
prob_between=(prob2-prob1)*100
print(prob_between)

# Is there a significant difference between Tesla’s opening and closing prices? (Paired t-test)
t_test,p_value=stats.ttest_rel(df1["Open"],df1["Close"])
print(f"T-statistic: {t_test:.4f}")
print(f"P-value: {p_value:.4f}")
if p_value<0.05:
    print("reject null hypothesis")
else:
    print("fail to reject h1")

df1[["Open","Close"]].corr()


#How has Tesla's stock price changed over time? (Line Chart)
fig=px.line(df1,x=df1["Date"],y=["Close"], title="Tesla's Stock Price Over Time", labels={"Close": "Closing Price ($)"})
fig.write_image("line.png")
fig.show()

# What is the distribution of Tesla's daily returns? (Histogram & KDE Plot)
df1["daily return"]=df1["Close"].pct_change()
sns.histplot(df1["daily return"],kde=True)
plt.xlabel("Daily Returns")
plt.ylabel("Frequency")
plt.title("Distribution of Tesla's Daily Returns")
plt.savefig("histo.png", dpi=300, bbox_inches='tight')  

 # Is there a relationship between trading volume and daily price changes? (Scatter Plot)
df1["daily change"]=abs(df1["Close"]-df1["Open"])

fig=px.scatter(x=df1["Volume"],y=df1["daily change"])
fig.update_layout(title="relationship between trading volume and daily price changes",
                 template="plotly_dark")
fig.write_image("scatter.png")
fig.show()

# "How does Tesla’s stock price trend over time using 7-day and 30-day moving averages?"
df1["7_days_ma"]=df1["Close"].rolling(window=7).mean()
df1["30_days_ma"]=df1["Close"].rolling(window=30).mean()
plt.plot(df1["Close"])
plt.plot(df1["7_days_ma"], label="7-Day Moving Average", color="red")
plt.plot(df1["30_days_ma"], label="30-Day Moving Average", color="green")
plt.xlabel("Date")
plt.ylabel("Stock Price ($)")
plt.title("Tesla's Stock Price with 7-Day, 30-Day")
plt.savefig("moving.png", dpi=300, bbox_inches='tight')  
plt.legend()


# Can we visualize a candlestick chart for TCS stock?
fig=go.Figure(data=go.Candlestick(x=df1["Date"],
    open=df1["Close"],
    close=df1["Open"],
    high=df1["High"],
    low=df1["Low"]))
fig.update_layout(
    title="Tesla Stock Candlestick Chart",
    xaxis_title="Date",
    yaxis_title="Stock Price",
    xaxis_rangeslider_visible=False,  
    template="plotly_dark",  
     width=1000, height=600
)
fig.write_image("c.png")
fig.show()

# What is the correlation between different stock metrics (Open, Close, High, Low, Volume)? (Heatmap)
sns.heatmap(df2.corr(),annot=True,cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.savefig("heat.png", dpi=300, bbox_inches='tight')  


# Do Tesla's daily returns follow a normal distribution? (Q-Q Plot)
df1=df1.dropna()
fig,ax=plt.subplots(figsize=(6,6))
stats.probplot(df1["Daily Return"],dist="norm",plot=ax)
plt.savefig("proba.png", dpi=300, bbox_inches='tight') 
plt.show()
